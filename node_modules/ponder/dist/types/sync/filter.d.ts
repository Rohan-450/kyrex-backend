import type { BlockFilter, Factory, Filter, LogFactory, LogFilter, TraceFilter, TransactionFilter, TransferFilter } from '../internal/types.js';
import type { TransactionReceipt } from '../types/eth.js';
import type { SyncBlock, SyncLog, SyncTrace, SyncTransaction } from '../types/sync.js';
import { type Address } from "viem";
/** Returns true if `address` is an address filter. */
export declare const isAddressFactory: (address: Address | Address[] | Factory | undefined | null) => address is LogFactory;
export declare const getChildAddress: ({ log, factory, }: {
    log: SyncLog;
    factory: Factory;
}) => Address;
/**
 * Returns `true` if `log` matches `filter`
 */
export declare const isLogFactoryMatched: ({ filter, log, }: {
    filter: LogFactory;
    log: SyncLog;
}) => boolean;
/**
 * Returns `true` if `log` matches `filter`
 */
export declare const isLogFilterMatched: ({ filter, block, log, childAddresses, }: {
    filter: LogFilter;
    block: SyncBlock;
    log: SyncLog;
    childAddresses?: Set<`0x${string}`> | Set<`0x${string}`>[] | undefined;
}) => boolean;
/**
 * Returns `true` if `transaction` matches `filter`
 */
export declare const isTransactionFilterMatched: ({ filter, block, transaction, fromChildAddresses, toChildAddresses, }: {
    filter: TransactionFilter;
    block: Pick<SyncBlock, "number">;
    transaction: SyncTransaction;
    fromChildAddresses?: Set<`0x${string}`> | Set<`0x${string}`>[] | undefined;
    toChildAddresses?: Set<`0x${string}`> | Set<`0x${string}`>[] | undefined;
}) => boolean;
/**
 * Returns `true` if `trace` matches `filter`
 */
export declare const isTraceFilterMatched: ({ filter, block, trace, fromChildAddresses, toChildAddresses, }: {
    filter: TraceFilter;
    block: Pick<SyncBlock, "number">;
    trace: Omit<SyncTrace["trace"], "calls" | "logs">;
    fromChildAddresses?: Set<`0x${string}`> | Set<`0x${string}`>[] | undefined;
    toChildAddresses?: Set<`0x${string}`> | Set<`0x${string}`>[] | undefined;
}) => boolean;
/**
 * Returns `true` if `trace` matches `filter`
 */
export declare const isTransferFilterMatched: ({ filter, block, trace, fromChildAddresses, toChildAddresses, }: {
    filter: TransferFilter;
    block: Pick<SyncBlock, "number">;
    trace: Omit<SyncTrace["trace"], "calls" | "logs">;
    fromChildAddresses?: Set<`0x${string}`> | Set<`0x${string}`>[] | undefined;
    toChildAddresses?: Set<`0x${string}`> | Set<`0x${string}`>[] | undefined;
}) => boolean;
/**
 * Returns `true` if `block` matches `filter`
 */
export declare const isBlockFilterMatched: ({ filter, block, }: {
    filter: BlockFilter;
    block: SyncBlock;
}) => boolean;
export declare const defaultBlockFilterInclude: Exclude<BlockFilter["include"], undefined>;
export declare const defaultTransactionReceiptInclude: `transactionReceipt.${keyof TransactionReceipt}`[];
export declare const defaultLogFilterInclude: Exclude<LogFilter["include"], undefined>;
export declare const defaultTransactionFilterInclude: Exclude<TransactionFilter["include"], undefined>;
export declare const defaultTraceFilterInclude: Exclude<TraceFilter["include"], undefined>;
export declare const defaultTransferFilterInclude: Exclude<TransferFilter["include"], undefined>;
export declare const shouldGetTransactionReceipt: (filter: Pick<Filter, "include" | "type">) => boolean;
//# sourceMappingURL=filter.d.ts.map