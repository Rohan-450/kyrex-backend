import type { Common } from '../internal/common.js';
import type { Event, Factory, RawEvent, Source } from '../internal/types.js';
import type { BlockWithEventData } from '../sync-realtime/index.js';
import type { AbiEvent } from "abitype";
import { type Address, type Hex } from "viem";
/**
 * Create `RawEvent`s from raw data types
 */
export declare const buildEvents: ({ sources, blockWithEventData: { block, logs, transactions, transactionReceipts, traces, }, finalizedChildAddresses, unfinalizedChildAddresses, chainId, }: {
    sources: Source[];
    blockWithEventData: Omit<BlockWithEventData, "filters" | "factoryLogs">;
    finalizedChildAddresses: Map<Factory, Set<Address>>;
    unfinalizedChildAddresses: Map<Factory, Set<Address>>;
    chainId: number;
}) => RawEvent[];
export declare const decodeEvents: (common: Common, sources: Source[], rawEvents: RawEvent[]) => Event[];
/** @see https://github.com/wevm/viem/blob/main/src/utils/abi/decodeEventLog.ts#L99 */
export declare function decodeEventLog({ abiItem, topics, data, }: {
    abiItem: AbiEvent;
    topics: [signature: Hex, ...args: Hex[]] | [];
    data: Hex;
}): any;
export declare function removeNullCharacters(obj: unknown): unknown;
//# sourceMappingURL=events.d.ts.map