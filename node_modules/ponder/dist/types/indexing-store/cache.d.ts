import type { Database } from '../database/index.js';
import type { Common } from '../internal/common.js';
import type { Schema, SchemaBuild } from '../internal/types.js';
import type { Drizzle } from '../types/db.js';
import { type Column, type SQL, type Table } from "drizzle-orm";
export type IndexingCache = {
    /**
     * Returns true if the cache has an entry for `table` with `key`.
     */
    has: (params: {
        table: Table;
        key: object;
    }) => boolean;
    /**
     * Returns the entry for `table` with `key`.
     */
    get: (params: {
        table: Table;
        key: object;
        db: Drizzle<Schema>;
    }) => {
        [key: string]: unknown;
    } | null | Promise<{
        [key: string]: unknown;
    } | null>;
    /**
     * Sets the entry for `table` with `key` to `row`.
     */
    set: (params: {
        table: Table;
        key: object;
        row: {
            [key: string]: unknown;
        };
        isUpdate: boolean;
    }) => {
        [key: string]: unknown;
    };
    /**
     * Deletes the entry for `table` with `key`.
     */
    delete: (params: {
        table: Table;
        key: object;
        db: Drizzle<Schema>;
    }) => boolean | Promise<boolean>;
    /**
     * Writes all temporary data to the database.
     */
    flush: (params: {
        db: Drizzle<Schema>;
    }) => Promise<void>;
    /**
     * Make all temporary data permanent and prepare the cache for
     * the next iteration.
     *
     * Note: It is assumed this is called after `flush`
     * because it clears the buffers.
     */
    commit: () => void;
    /**
     * Remove spillover and buffer entries.
     */
    rollback: () => void;
    /**
     * Marks the cache as incomplete.
     */
    invalidate: () => void;
    /**
     * Deletes all entries from the cache.
     */
    clear: () => void;
};
/**
 * Returns true if the column has a "default" value that is used when no value is passed.
 * Handles `.default`, `.$defaultFn()`, `.$onUpdateFn()`.
 */
export declare const hasEmptyValue: (column: Column) => boolean;
/** Returns the "default" value for `column`. */
export declare const getEmptyValue: (column: Column, isUpdate: boolean) => unknown;
export declare const normalizeColumn: (column: Column, value: unknown, isUpdate: boolean) => unknown;
export declare const normalizeRow: (table: Table, row: {
    [key: string]: unknown;
}, isUpdate: boolean) => {
    [key: string]: unknown;
};
export declare const getCacheKey: (table: Table, key: object) => string;
/** Returns an sql where condition for `table` with `key`. */
export declare const getWhereCondition: (table: Table, key: Object) => SQL<unknown>;
export declare const createIndexingCache: ({ common, database, schemaBuild: { schema }, checkpoint, }: {
    common: Common;
    database: Database;
    schemaBuild: Pick<SchemaBuild, "schema">;
    checkpoint: string;
}) => IndexingCache;
//# sourceMappingURL=cache.d.ts.map