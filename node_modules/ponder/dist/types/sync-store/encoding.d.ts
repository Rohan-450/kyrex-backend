import type { FragmentId } from '../internal/types.js';
import type { SyncBlock, SyncLog, SyncTrace, SyncTransaction, SyncTransactionReceipt } from '../types/sync.js';
import type { ColumnType, Insertable } from "kysely";
import type { Address, Hash, Hex } from "viem";
type BlocksTable = {
    hash: Hash;
    chainId: number;
    checkpoint: string;
    number: ColumnType<string, string | bigint, string | bigint>;
    timestamp: ColumnType<string, string | bigint, string | bigint>;
    baseFeePerGas: ColumnType<string, string | bigint, string | bigint> | null;
    difficulty: ColumnType<string, string | bigint, string | bigint>;
    extraData: Hex;
    gasLimit: ColumnType<string, string | bigint, string | bigint>;
    gasUsed: ColumnType<string, string | bigint, string | bigint>;
    logsBloom: Hex;
    miner: Address;
    mixHash: Hash | null;
    nonce: Hex | null;
    parentHash: Hash;
    receiptsRoot: Hex;
    sha3Uncles: Hash | null;
    size: ColumnType<string, string | bigint, string | bigint>;
    stateRoot: Hash;
    totalDifficulty: ColumnType<string, string | bigint, string | bigint> | null;
    transactionsRoot: Hash;
};
export declare const encodeBlock: ({ block, chainId, }: {
    block: SyncBlock;
    chainId: number;
}) => Insertable<BlocksTable>;
type LogsTable = {
    id: string;
    chainId: number;
    checkpoint: string | null;
    blockHash: Hash;
    blockNumber: ColumnType<string, string | bigint, string | bigint>;
    logIndex: number;
    transactionHash: Hash;
    transactionIndex: number;
    address: Address;
    topic0: Hex | null;
    topic1: Hex | null;
    topic2: Hex | null;
    topic3: Hex | null;
    data: Hex;
};
export declare const encodeLog: ({ log, block, chainId, }: {
    log: SyncLog;
    block?: SyncBlock | undefined;
    chainId: number;
}) => Insertable<LogsTable>;
type TransactionsTable = {
    hash: Hash;
    chainId: number;
    /** `checkpoint` will be null for transactions inserted before 0.8. This is to avoid a very slow migration. */
    checkpoint: string | null;
    blockHash: Hash;
    blockNumber: ColumnType<string, string | bigint, string | bigint>;
    from: Address;
    gas: ColumnType<string, string | bigint, string | bigint>;
    input: Hex;
    nonce: number;
    r: Hex | null;
    s: Hex | null;
    to: Address | null;
    transactionIndex: number;
    v: ColumnType<string, string | bigint, string | bigint> | null;
    value: ColumnType<string, string | bigint, string | bigint>;
    type: Hex;
    gasPrice: ColumnType<string, string | bigint, string | bigint> | null;
    maxFeePerGas: ColumnType<string, string | bigint, string | bigint> | null;
    maxPriorityFeePerGas: ColumnType<string, string | bigint, string | bigint> | null;
    accessList: string | null;
};
export declare const encodeTransaction: ({ transaction, block, chainId, }: {
    transaction: SyncTransaction;
    block: Pick<SyncBlock, "timestamp">;
    chainId: number;
}) => Insertable<TransactionsTable>;
type TransactionReceiptsTable = {
    transactionHash: Hash;
    chainId: number;
    blockHash: Hash;
    blockNumber: ColumnType<string, string | bigint, string | bigint>;
    contractAddress: Address | null;
    cumulativeGasUsed: ColumnType<string, string | bigint, string | bigint>;
    effectiveGasPrice: ColumnType<string, string | bigint, string | bigint>;
    from: Address;
    gasUsed: ColumnType<string, string | bigint, string | bigint>;
    logsBloom: Hex;
    status: Hex;
    to: Address | null;
    transactionIndex: number;
    type: Hex;
};
export declare const encodeTransactionReceipt: ({ transactionReceipt, chainId, }: {
    transactionReceipt: SyncTransactionReceipt;
    chainId: number;
}) => Insertable<TransactionReceiptsTable>;
type TracesTable = {
    id: string;
    chainId: number;
    checkpoint: string;
    type: string;
    transactionHash: Hex;
    blockHash: Hex;
    blockNumber: ColumnType<string, string | bigint, string | bigint>;
    from: Address;
    to: Address | null;
    gas: ColumnType<string, string | bigint, string | bigint>;
    gasUsed: ColumnType<string, string | bigint, string | bigint>;
    input: Hex;
    functionSelector: Hex;
    output: Hex | null;
    error: string | null;
    revertReason: string | null;
    value: ColumnType<string | null, string | bigint | null, string | bigint | null>;
    index: number;
    subcalls: number;
    isReverted: number;
};
export declare function encodeTrace({ trace, block, transaction, chainId, }: {
    trace: Omit<SyncTrace["trace"], "calls" | "logs">;
    block: Pick<SyncBlock, "hash" | "number" | "timestamp">;
    transaction: Pick<SyncTransaction, "hash" | "transactionIndex">;
    chainId: number;
}): Insertable<TracesTable>;
type RpcRequestResultsTable = {
    request: string;
    request_hash: ColumnType<string, undefined>;
    chain_id: number;
    block_number: ColumnType<string | undefined, string | bigint | undefined, string | bigint | undefined>;
    result: string;
};
type IntervalTable = {
    fragment_id: FragmentId;
    chain_id: number;
    blocks: string;
};
export type PonderSyncSchema = {
    blocks: BlocksTable;
    logs: LogsTable;
    transactions: TransactionsTable;
    transactionReceipts: TransactionReceiptsTable;
    traces: TracesTable;
    rpc_request_results: RpcRequestResultsTable;
    intervals: IntervalTable;
};
export {};
//# sourceMappingURL=encoding.d.ts.map