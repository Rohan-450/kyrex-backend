import { formatEta, formatPercentage } from '../utils/format.js';
import { Box, Text, render as inkRender } from "ink";
import React from "react";
import { ProgressBar } from "./ProgressBar.js";
import { Table } from "./Table.js";
export const buildUiState = () => {
    return {
        port: 42069,
        hostname: "localhost",
        sync: [],
        indexing: {
            hasError: false,
            overall: {
                completedSeconds: 0,
                cachedSeconds: 0,
                totalSeconds: 0,
                progress: 0,
                totalEvents: 0,
            },
            events: [],
        },
        app: {
            progress: 0,
            eta: undefined,
            mode: undefined,
        },
    };
};
const App = (ui) => {
    const { sync, indexing, app, port, hostname } = ui;
    return (React.createElement(Box, { flexDirection: "column" },
        React.createElement(Text, null, " "),
        indexing.hasError ? (React.createElement(Text, { color: "cyan" }, "Resolve the error and save your changes to reload the server.")) : (React.createElement(React.Fragment, null,
            React.createElement(Text, { bold: true }, "Sync"),
            React.createElement(Text, null, " "),
            sync.length === 0 ? (React.createElement(Text, null, "Waiting to start...")) : (React.createElement(Table, { rows: sync, columns: [
                    {
                        title: "Network",
                        key: "networkName",
                        align: "left",
                    },
                    {
                        title: "Status",
                        key: "status",
                        align: "left",
                        format: (_, row) => row.status === "historical"
                            ? `${row.status} (${formatPercentage(row.progress)})`
                            : row.status,
                    },
                    {
                        title: "Block",
                        key: "block",
                        align: "right",
                    },
                    {
                        title: "RPC (req/s)",
                        key: "rps",
                        align: "right",
                        format: (_, row) => row.rps.toFixed(1),
                    },
                ] })),
            React.createElement(Text, null, " "),
            React.createElement(Text, { bold: true }, "Indexing"),
            React.createElement(Text, null, " "),
            indexing.events.length === 0 ? (React.createElement(Text, null, "Waiting to start...")) : (React.createElement(Table, { rows: indexing.events, columns: [
                    { title: "Event", key: "eventName", align: "left" },
                    { title: "Count", key: "count", align: "right" },
                    {
                        title: "Duration (ms)",
                        key: "averageDuration",
                        align: "right",
                        format: (v) => v > 0 ? (v < 0.001 ? "<0.001" : v.toFixed(3)) : "-",
                    },
                ] })),
            React.createElement(Text, null, " "),
            React.createElement(Box, { flexDirection: "row" },
                React.createElement(Text, { bold: true }, "Progress "),
                app.mode === undefined || app.progress === 0 ? null : (React.createElement(Text, null,
                    "(",
                    app.mode === "historical" ? (React.createElement(Text, { color: "yellowBright" }, "historical")) : (React.createElement(Text, { color: "greenBright" }, "live")),
                    ")"))),
            React.createElement(Text, null, " "),
            React.createElement(Box, { flexDirection: "row" },
                React.createElement(ProgressBar, { current: app.mode === "realtime" ? 1 : app.progress, end: 1, width: 48 }),
                React.createElement(Text, null,
                    " ",
                    formatPercentage(app.mode === "realtime" ? 1 : app.progress),
                    app.eta === undefined || app.eta === 0
                        ? null
                        : ` (${formatEta(app.eta * 1000)} eta)`)),
            React.createElement(Text, null, " "),
            React.createElement(Box, { flexDirection: "column" },
                React.createElement(Text, { bold: true }, "API functions "),
                React.createElement(Box, { flexDirection: "row" },
                    React.createElement(Text, null,
                        "Server live at http://",
                        hostname,
                        ":",
                        port)))))));
};
export const setupInkApp = (ui) => {
    const app = inkRender(React.createElement(App, { ...ui }));
    return {
        render: (newUi) => {
            app.rerender(React.createElement(App, { ...newUi }));
        },
        unmount: () => {
            app.clear();
            app.unmount();
        },
    };
};
//# sourceMappingURL=app.js.map